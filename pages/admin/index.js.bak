import { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import styles from '../../styles/Admin.module.css';
import { useRouter } from 'next/router';
import Link from 'next/link';
import axios from 'axios';

export default function Admin() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [password, setPassword] = useState('');
  const [artworks, setArtworks] = useState([]);
  const [message, setMessage] = useState('');
  const [formData, setFormData] = useState({
    id: '',
    title: '',
    year: '',
    medium: '',
    dimensions: '',
    category: '',
    description: '',
    imageUrl: '',
    status: 'available',
    price: ''
  });
  const [uploadingImage, setUploadingImage] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const fileInputRef = useRef(null);
  const [editMode, setEditMode] = useState(false);
  const [activeSection, setActiveSection] = useState('gallery'); // 'gallery' or 'about'
  const router = useRouter();
  
  // About page state
  const [aboutData, setAboutData] = useState({
    bioSections: [''],
    exhibitions: [{year: '', details: ''}],
    contact: { email: '', message: '' }
  });
  const [aboutMessage, setAboutMessage] = useState('');

  // Load data when user is logged in
  useEffect(() => {
    if (isLoggedIn) {
      // Load gallery data
      try {
        // In production, we'd fetch this from an API
        const gallery = require('../../data/gallery.json');
        setArtworks(gallery.works);
      } catch (error) {
        setMessage('Error loading gallery data');
      }
      
      // Load about data
      loadAboutData();
    }
  }, [isLoggedIn]);
  
  // Load about page data
  const loadAboutData = async () => {
    try {
      const response = await fetch('/api/getAbout');
      if (!response.ok) {
        throw new Error('Failed to load about data');
      }
      const data = await response.json();
      setAboutData(data);
      setAboutMessage('About data loaded successfully');
    } catch (error) {
      console.error('Error loading about data:', error);
      setAboutMessage('Error loading about data. Please try again.');
    }
  };

  const handleLogin = (e) => {
    e.preventDefault();
    // In a real app, this would be a secure authentication
    if (password === 'admin123') { // Default password for demo purposes
      setIsLoggedIn(true);
      setMessage('');
    } else {
      setMessage('Incorrect password');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };
  
  // State for tracking uploaded image URL before it's added to an artwork
  const [uploadedImageUrl, setUploadedImageUrl] = useState('');
  const [uploadError, setUploadError] = useState('');

  // Handle image file upload
  const handleImageUpload = async (e) => {
    console.log('Starting image upload...');
    const file = e.target.files[0];
    if (!file) {
      console.log('No file selected');
      return;
    }
    console.log('File to upload:', file.name, file.type, file.size);
    
    // Validate file type
    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validTypes.includes(file.type)) {
      setMessage('Please select a valid image file (JPEG, PNG, GIF, WEBP)');
      return;
    }
    
    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setMessage('Image file size must be less than 5MB');
      return;
    }
    
    setUploadError('');
    
    try {
      setUploadingImage(true);
      setUploadProgress(0);
      setMessage('Uploading image...');
      
      const formData = new FormData();
      formData.append('image', file);
      
      console.log('Sending upload request...');
      const response = await axios.post('/api/uploadImage', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          setUploadProgress(percentCompleted);
          console.log(`Upload progress: ${percentCompleted}%`);
        }
      });
      
      console.log('Upload API response:', response);
      
      if (response.data && response.data.success) {
        console.log('Upload success, response:', response.data);
        // Make sure the path starts with a forward slash
        const filePath = response.data.filePath.startsWith('/') ? 
          response.data.filePath : `/${response.data.filePath}`;
        
        console.log('Setting uploaded image URL to:', filePath);
        // Store the uploaded image URL separately first
        setUploadedImageUrl(filePath);
        setMessage('Image uploaded successfully! Click "Use This Image" to apply it to this artwork.');
        
        // Debug - try to preload the image to ensure it's accessible
        const img = new Image();
        img.onload = () => console.log('Image preloaded successfully:', filePath);
        img.onerror = (err) => console.error('Failed to preload image:', filePath, err);
        img.src = filePath;
      } else {
        throw new Error('Upload response did not indicate success');
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      setUploadError(`Upload failed: ${error.response?.data?.error || error.message}`);
      setMessage(`Error uploading image: ${error.response?.data?.error || error.message}`);
    } finally {
      setUploadingImage(false);
      setUploadProgress(0);
      // Reset the file input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };
  
  // Apply uploaded image to the current artwork form
  const applyUploadedImage = () => {
    if (uploadedImageUrl) {
      setFormData(prev => ({
        ...prev,
        imageUrl: uploadedImageUrl
      }));
      setMessage('Image applied to artwork! Remember to click "Add Artwork" and then "Save Gallery".');
    }
  };

  const handleAddOrUpdate = (e) => {
    e.preventDefault();
    if (!formData.title || !formData.category) {
      setMessage('Title and category are required');
      return;
    }
    
    // If an image was uploaded but not saved to the form data yet, show a warning
    if (uploadedImageUrl && (!formData.imageUrl || formData.imageUrl !== uploadedImageUrl)) {
      if (confirm('You have an uploaded image that hasn\'t been applied to this artwork. Would you like to use this image?')) {
        setFormData(prev => ({
          ...prev,
          imageUrl: uploadedImageUrl
        }));
        // Continue with the save after setting the image URL
      }
    }

    if (editMode) {
      // Update existing artwork
      const updatedArtworks = artworks.map(artwork => 
        artwork.id === formData.id ? formData : artwork
      );
      setArtworks(updatedArtworks);
      setMessage('Artwork updated successfully');
    } else {
      // Add new artwork with a generated ID
      const newArtwork = {
        ...formData,
        id: `work-${String(artworks.length + 1).padStart(3, '0')}`
      };
      setArtworks([...artworks, newArtwork]);
      setMessage('New artwork added successfully');
    }

    // In a real app, we would save to a file or database here
    // For demo purposes, we're just updating state

    // Reset form
    setFormData({
      id: '',
      title: '',
      year: '',
      medium: '',
      dimensions: '',
      category: '',
      description: '',
      imageUrl: '',
      status: 'available',
      price: ''
    });
    setEditMode(false);
  };

  const handleEdit = (artwork) => {
    setFormData(artwork);
    setEditMode(true);
    window.scrollTo(0, 0);
  };

  const handleDelete = (id) => {
    if (window.confirm('Are you sure you want to delete this artwork?')) {
      const updatedArtworks = artworks.filter(artwork => artwork.id !== id);
      setArtworks(updatedArtworks);
      setMessage('Artwork deleted successfully');
      
      // In a real app, we would update the file or database here
    }
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setPassword('');
  };

  const handleSaveGallery = async () => {
    try {
      // First check if there are any artworks with uploadedImageUrl that haven't been saved
      if (uploadedImageUrl && !artworks.some(art => art.imageUrl === uploadedImageUrl)) {
        if (confirm('You have an uploaded image that hasn\'t been added to any artwork. Do you still want to save?')) {
          // User chose to continue anyway
        } else {
          return; // User canceled
        }
      }

      // Log the gallery data being saved
      console.log('Saving gallery with artworks:', artworks);
      
      const response = await fetch('/api/saveGallery', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ works: artworks }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save gallery data');
      }
      
      const data = await response.json();
      setMessage(data.message || 'Gallery saved successfully! Changes will appear in the gallery.');
      
      // After saving successfully, reset the uploadedImageUrl but keep the form data
      // so the user can see what they've just saved
      setUploadedImageUrl('');
      
      // Force a reload of the gallery page data cache
      fetch('/api/getGallery?forceRefresh=true').catch(err => {
        console.error('Failed to refresh gallery cache:', err);
      });
    } catch (error) {
      console.error('Error saving gallery data:', error);
      setMessage(`Error: ${error.message}`);
    }
  };
  
  // Save about page data
  const handleSaveAbout = async () => {
    try {
      console.log('Saving about data:', aboutData);
      
      // Validate data
      if (!aboutData.bioSections || aboutData.bioSections.length === 0 || 
          !aboutData.exhibitions || aboutData.exhibitions.length === 0 || 
          !aboutData.contact || !aboutData.contact.email) {
        setAboutMessage('Please fill all required fields (biography, exhibitions, and contact information)');
        return;
      }
      
      const response = await fetch('/api/saveAbout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(aboutData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save about data');
      }
      
      const data = await response.json();
      setAboutMessage(data.message || 'About page updated successfully!');
    } catch (error) {
      console.error('Error saving about data:', error);
      setAboutMessage(`Error: ${error.message}`);
    }
  };

  // Functions for manipulating about data
  const handleAboutInputChange = (e, section, index = null, field = null) => {
    const { name, value } = e.target;
    
    setAboutData(prev => {
      const updated = { ...prev };
      
      if (section === 'bioSections' && index !== null) {
        updated.bioSections = [...prev.bioSections];
        updated.bioSections[index] = value;
      } 
      else if (section === 'exhibitions' && index !== null && field !== null) {
        updated.exhibitions = [...prev.exhibitions];
        updated.exhibitions[index] = { 
          ...updated.exhibitions[index],
          [field]: value 
        };
      }
      else if (section === 'contact') {
        updated.contact = { ...prev.contact, [name]: value };
      }
      
      return updated;
    });
  };
  
  const addBioParagraph = () => {
    setAboutData(prev => ({
      ...prev,
      bioSections: [...prev.bioSections, '']
    }));
  };
  
  const removeBioParagraph = (index) => {
    setAboutData(prev => {
      const updated = { ...prev };
      updated.bioSections = prev.bioSections.filter((_, i) => i !== index);
      return updated;
    });
  };
  
  const addExhibition = () => {
    setAboutData(prev => ({
      ...prev,
      exhibitions: [...prev.exhibitions, { year: '', details: '' }]
    }));
  };
  
  const removeExhibition = (index) => {
    setAboutData(prev => {
      const updated = { ...prev };
      updated.exhibitions = prev.exhibitions.filter((_, i) => i !== index);
      return updated;
    });
  };

  if (!isLoggedIn) {
    return (
      <div className={styles.container}>
        <Head>
          <title>Admin Login | Jack Carden</title>
          <meta name="description" content="Admin area" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.loginContainer}>
          <h1>Admin Login</h1>
          {message && <p className={styles.message}>{message}</p>}
          <form onSubmit={handleLogin} className={styles.loginForm}>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter password"
              className={styles.loginInput}
            />
            <button type="submit" className={styles.loginButton}>Login</button>
          </form>
          <p><Link href="/">Return to homepage</Link></p>
        </main>
      </div>
    );
  }
};

const handleLogout = () => {
  setIsLoggedIn(false);
  setPassword('');
};

const handleSaveGallery = async () => {
  try {
    // First check if there are any artworks with uploadedImageUrl that haven't been saved
    if (uploadedImageUrl && !artworks.some(art => art.imageUrl === uploadedImageUrl)) {
      if (confirm('You have an uploaded image that hasn\'t been added to any artwork. Do you still want to save?')) {
        // User chose to continue anyway
      } else {
        return; // User canceled
      }
    }

    // Log the gallery data being saved
    console.log('Saving gallery with artworks:', artworks);
    
    const response = await fetch('/api/saveGallery', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ works: artworks }),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to save gallery data');
    }
    
    const data = await response.json();
    setMessage(data.message || 'Gallery saved successfully! Changes will appear in the gallery.');
    
    // After saving successfully, reset the uploadedImageUrl but keep the form data
    // so the user can see what they've just saved
    setUploadedImageUrl('');
    
    // Force a reload of the gallery page data cache
    fetch('/api/getGallery?forceRefresh=true').catch(err => {
      console.error('Failed to refresh gallery cache:', err);
    });
  } catch (error) {
    console.error('Error saving gallery data:', error);
    setMessage(`Error: ${error.message}`);
  }
};
  
// Save about page data
const handleSaveAbout = async () => {
  try {
    console.log('Saving about data:', aboutData);
    
    // Validate data
    if (!aboutData.bioSections || aboutData.bioSections.length === 0 || 
        !aboutData.exhibitions || aboutData.exhibitions.length === 0 || 
        !aboutData.contact || !aboutData.contact.email) {
      setAboutMessage('Please fill all required fields (biography, exhibitions, and contact information)');
      return;
    }
    
    const response = await fetch('/api/saveAbout', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(aboutData),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to save about data');
    }
    
    const data = await response.json();
    setAboutMessage(data.message || 'About page updated successfully!');
  } catch (error) {
    console.error('Error saving about data:', error);
    setAboutMessage(`Error: ${error.message}`);
  }
};

// Functions for manipulating about data
const handleAboutInputChange = (e, section, index = null, field = null) => {
  const { name, value } = e.target;
  
  setAboutData(prev => {
    const updated = { ...prev };
    
    if (section === 'bioSections' && index !== null) {
      updated.bioSections = [...prev.bioSections];
      updated.bioSections[index] = value;
    } 
    else if (section === 'exhibitions' && index !== null && field !== null) {
      updated.exhibitions = [...prev.exhibitions];
      updated.exhibitions[index] = { 
        ...updated.exhibitions[index],
        [field]: value 
      };
    }
    else if (section === 'contact') {
      updated.contact = { ...prev.contact, [name]: value };
    }
    
    return updated;
  });
};
  
const addBioParagraph = () => {
  setAboutData(prev => ({
    ...prev,
    bioSections: [...prev.bioSections, '']
  }));
};
  
const removeBioParagraph = (index) => {
  setAboutData(prev => {
    const updated = { ...prev };
    updated.bioSections = prev.bioSections.filter((_, i) => i !== index);
    return updated;
  });
};
  
const addExhibition = () => {
  setAboutData(prev => ({
    ...prev,
    exhibitions: [...prev.exhibitions, { year: '', details: '' }]
  }));
};
  
const removeExhibition = (index) => {
  setAboutData(prev => {
    const updated = { ...prev };
    updated.exhibitions = prev.exhibitions.filter((_, i) => i !== index);
    return updated;
  });
};

if (!isLoggedIn) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Admin Login | Jack Carden</title>
        <meta name="description" content="Admin area" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.loginContainer}>
        <h1>Admin Login</h1>
        {message && <p className={styles.message}>{message}</p>}
        <form onSubmit={handleLogin} className={styles.loginForm}>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Enter password"
            className={styles.loginInput}
          />
          <button type="submit" className={styles.loginButton}>Login</button>
        </form>
        <p><Link href="/">Return to homepage</Link></p>
return (
  <div className={styles.container}>
    <Head>
      <title>Admin | Jack Carden</title>
      <meta name="robots" content="noindex,nofollow" />
    </Head>

    <main className={styles.main}>
      <div className={styles.adminHeader}>
        <h1>Admin Panel</h1>
        <div className={styles.sectionNav}>
          <button 
            onClick={() => setActiveSection('gallery')} 
            className={`${styles.navButton} ${activeSection === 'gallery' ? styles.activeNav : ''}`}
          >
            Gallery Manager
          </button>
          <button 
            onClick={() => setActiveSection('about')} 
            className={`${styles.navButton} ${activeSection === 'about' ? styles.activeNav : ''}`}
          >
            About Page Editor
          </button>
        </div>
        <div>
          <button onClick={() => router.push('/')} className={styles.button}>Back to Homepage</button>
          <button onClick={() => router.push('/gallery')} className={styles.button}>View Gallery</button>
          <button onClick={() => router.push('/about')} className={styles.button}>View About</button>
          <button onClick={handleLogout} className={styles.button}>Logout</button>
        </div>
      </div>
      {activeSection === 'gallery' && (
        <section className={styles.formSection}>
          <h2>{editMode ? 'Edit Artwork' : 'Add New Artwork'}</h2>
          <form onSubmit={handleAddOrUpdate} className={styles.form}>
            <div className={styles.formRow}>
              <div className={styles.formGroup}>
                <label htmlFor="title">Title</label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="year">Year</label>
                <input
                  type="text"
                  id="year"
                  name="year"
                  value={formData.year}
                  onChange={handleInputChange}
                />
              </div>
            </div>

            <div className={styles.formRow}>
              <div className={styles.formGroup}>
                <label htmlFor="medium">Medium</label>
                <input
                  type="text"
                  id="medium"
                  name="medium"
                  value={formData.medium}
                  onChange={handleInputChange}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="dimensions">Dimensions</label>
                <input
                  type="text"
                  id="dimensions"
                  name="dimensions"
                  value={formData.dimensions}
                  onChange={handleInputChange}
                />
              </div>
            </div>

            <div className={styles.formRow}>
              <div className={styles.formGroup}>
                <label htmlFor="category">Category</label>
                <input
                  type="text"
                  id="category"
                  name="category"
                  value={formData.category}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="status">Status</label>
                <select
                  id="status"
                  name="status"
                  value={formData.status}
                  onChange={handleInputChange}
                >
                  <option value="available">Available</option>
                  <option value="sold">Sold</option>
                </select>
              </div>
            </div>

            <div className={styles.formRow}>
              <div className={styles.formGroup}>
                <h3>Image Upload</h3>
                <div className={styles.uploadInstructions}>
                  <p>1. Upload an image using the button below</p>
                  <p>2. Once uploaded, click "Use This Image" to apply it to this artwork</p>
                  <p>3. Don't forget to click "Save Gallery" when finished to save all changes</p>
                </div>
                <label htmlFor="imageUpload" className={styles.fileInputLabel}>
                  {uploadingImage ? `Uploading (${uploadProgress}%)` : 'Choose Image'}
                </label>
                <input
                  type="file"
                  id="imageUpload"
                  onChange={handleImageUpload}
                  accept="image/jpeg, image/png, image/gif, image/webp"
                  className={styles.fileInput}
                  ref={fileInputRef}
                />
                {uploadProgress > 0 && uploadProgress < 100 && (
                  <div className={styles.uploadProgress}>Uploading: {uploadProgress}%</div>
                )}

                {/* Debug Information */}
                <div className={styles.debug}>
                  <p>Upload state: {uploadingImage ? 'Uploading' : 'Ready'}</p>
                  <p>Upload progress: {uploadProgress}%</p>
                  <p>Upload URL: {uploadedImageUrl || 'None'}</p>
                </div>

                {/* Upload Error Display */}
                {uploadError && (
                  <div className={styles.errorMessage}>
                    <p>Error: {uploadError}</p>
                  </div>
                )}

                {/* Uploaded Image Preview */}
                <div className={styles.uploadPreviewSection}>
                  {uploadedImageUrl ? (
                    <div className={styles.imagePreviewContainer}>
                      <h4>Uploaded Image:</h4>
                      <div className={styles.imageWrapper}>
                        <img
                          src={uploadedImageUrl}
                          alt="Preview"
                          className={styles.imagePreview}
                          onLoad={() => console.log('Image preview loaded successfully')}
                          onError={(e) => {
                            console.error('Image preview failed to load:', uploadedImageUrl);
                            if (e.target.src !== '/placeholder.jpg') {
                              e.target.onerror = null;
                              e.target.src = '/placeholder.jpg';
                            }
                          }}
                        />
                      </div>
                      <div className={styles.imageActions}>
                        <button
                          type="button"
                          onClick={applyUploadedImage}
                          className={styles.useImageButton}
                        >
                          Use This Image
                        </button>
                        <button
                          type="button"
                          onClick={() => setUploadedImageUrl('')}
                          className={styles.removeImageButton}
                        >
                          Remove
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className={styles.noImagePreview}>
                      <p>No image uploaded yet</p>
                    </div>
                  )}
                </div>
                
                {/* Current Artwork Image (if different from uploaded) */}
                {formData.imageUrl && formData.imageUrl !== uploadedImageUrl && (
                  <div className={styles.currentImageContainer}>
                    <h4>Current Artwork Image:</h4>
                    <div className={styles.imageWrapper}>
                      <img
                        src={formData.imageUrl}
                        alt="Current artwork"
                        className={styles.imagePreview}
                        onLoad={() => console.log('Current artwork image loaded successfully')}
                        onError={(e) => {
                          console.error('Current image failed to load:', formData.imageUrl);
                          if (e.target.src !== '/placeholder.jpg') {
                            e.target.onerror = null;
                            e.target.src = '/placeholder.jpg';
                          }
                        }}
                      />
                    </div>
                  </div>
                )}
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="price">Price (if available)</label>
                <input
                  type="text"
                  id="price"
                  name="price"
                  value={formData.price || ''}
                  onChange={handleInputChange}
                  disabled={formData.status === 'sold'}
                />
              </div>
            </div>

            <div className={styles.formGroup}>
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows="4"
              />
            </div>

            <div className={styles.formActions}>
              <button type="submit" className={styles.button}>
                {editMode ? 'Update Artwork' : 'Add Artwork'}
              </button>
              {editMode && (
                <button
                  type="button"
                  onClick={() => {
                    setFormData({
                      id: '',
                      title: '',
                      year: '',
                      medium: '',
                      dimensions: '',
                      category: '',
                      description: '',
                      imageUrl: '',
                      status: 'available',
                      price: ''
                    });
                    setEditMode(false);
                  }}
                  className={styles.cancelButton}
                >
                  Cancel Edit
                </button>
              )}
            </div>
          </form>
        </section>

        <section className={styles.gallerySection}>
          <div className={styles.sectionHeader}>
            <h2>Gallery Items ({artworks.length})</h2>
            <button onClick={handleSaveGallery} className={styles.saveButton}>
              Save Gallery
            </button>
          </div>
          
          <div className={styles.artworkGrid}>
            {artworks.map(artwork => (
              <div key={artwork.id} className={styles.artworkCard}>
                <div className={styles.artworkImageContainer}>
                  {artwork.imageUrl ? (
                    <img 
                      src={artwork.imageUrl} 
                      alt={artwork.title} 
                      className={styles.artworkImage} 
                      onError={(e) => {
                        // Prevent infinite error loops
                        if (e.target.src !== '/placeholder.jpg') {
                          e.target.onerror = null;
                          e.target.src = '/placeholder.jpg';
                        }
                      }}
                    />
                  ) : (
                    <div className={styles.placeholderImage}>No Image</div>
                  )}
                </div>
                <div className={styles.artworkInfo}>
                  <h3>{artwork.title}</h3>
                  <p>{artwork.year} • {artwork.medium}</p>
                  <p className={artwork.status === 'sold' ? styles.soldStatus : styles.availableStatus}>
                    {artwork.status === 'sold' ? 'SOLD' : `Available • ${artwork.price || 'Price on request'}`}
                  </p>
                </div>
                <div className={styles.artworkActions}>
                  <button onClick={() => handleEdit(artwork)} className={styles.editButton}>
                    Edit
                  </button>
                  <button onClick={() => handleDelete(artwork.id)} className={styles.deleteButton}>
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        </section>
      </main>
    </div>
  );
}
